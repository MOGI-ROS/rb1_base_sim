<?xml version="1.0"?>
<launch>

	<!-- roslaunch arguments --> 
	<arg name="debug" default="false"/>
	<arg name="launch_rviz" default="true"/>
	<arg name="launch_robot_a" default="true"/>
	<arg name="launch_navigation" default="true"/>


	<!--enumerate here the different robots-->
	<arg name="robot_a" value="rb1_base_a"/>

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
	<arg name="world_name" value="$(find rb1_base_gazebo)/worlds/rb1_base.world"/>
	<arg name="debug" value="$(arg debug)" />
	<arg name="paused" value="false"/>
	<arg name="use_sim_time" value="true"/>
	<arg name="headless" value="false"/>
	</include>

	<!-- launch rviz -->
	<node if="$(arg launch_rviz)" name="rviz" pkg="rviz" type="rviz" required="true" />
	
	<!-- Run the map server -->
	<node if="$(arg launch_navigation)" name="map_server" pkg="map_server" type="map_server" args="$(find rb1_base_navigation)/maps/empty/map_empty.yaml"/>  
  
	<!-- BEGIN ROBOT 1-->
	<group if="$(arg launch_robot_a)" ns="$(arg robot_a)">
	  
		<arg name="prefix_frame" value="$(arg robot_a)_"/>
		<arg name="prefix_topic" value=""/> 
		  
		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" 
		command="$(find xacro)/xacro '$(find rb1_base_description)/robots/rb1_base_platform_standalone_multi.urdf.xacro' prefix_frame:=$(arg prefix_frame) prefix_topic:=$(arg prefix_topic) --inorder"/>

		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_rb1_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		 args="-urdf -param robot_description -model $(arg robot_a)" />


		<!-- Load joint controller configurations from YAcd .ML file to parameter server -->
		<rosparam file="$(find rb1_base_control)/config/$(arg robot_a)_control.yaml" command="load"/>

		<!-- load the controllers -->
		<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
		   output="screen" ns="/$(arg robot_a)" args="--shutdown-time 1 
						  rb1_base_control
						  joint_read_state_controller"/>
					  
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
		respawn="false" output="screen">
		<remap from="/joint_states" to="joint_states" />
		</node>

		<!--node pkg="twist_mux" type="twist_mux" name="twist_mux">
		<rosparam command="load" file="$(find rb1_base_control)/config/twist_mux.yaml" />
		<remap from="cmd_vel_out" to="cmd_vel"/>
		</node-->

		<!-- pad -->
		<!--include file="$(find rb1_base_pad)/launch/rb1_base_pad.launch"/-->

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!-- amcl -->
		<include if="$(arg launch_navigation)" file="$(find rb1_base_navigation)/launch/navigation_amcl/move_base_amcl.launch">
			<arg name="prefix_frame" value="$(arg prefix_frame)"/>
		</include>

	</group>

</launch>
