<?xml version="1.0"?>
<launch>
	
	<arg name="id_robot" default="rb1_base_a"/>
	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0"/>
	<arg name="has_elevator" default="false"/>
	<arg name="xacro_robot" default="rb1_base_v3_multi.urdf.xacro"/>
	<arg name="launch_navigation" default="false"/>
  
	<!-- BEGIN ROBOT-->
	<group ns="$(arg id_robot)">
	  
		<arg name="prefix" value="$(arg id_robot)_"/>
		  
		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" 
		command="$(find xacro)/xacro '$(find rb1_base_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) --inorder"/>

		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_rb1_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		 args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -urdf -param robot_description -model $(arg id_robot)" />
	
		<!-- Load joint controller configurations from YAcd .ML file to parameter server -->
		<rosparam file="$(find rb1_base_control)/config/$(arg id_robot)_control.yaml" command="load"/>

		<!-- load the controllers -->
		<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
		   output="screen" ns="/$(arg id_robot)" args="--shutdown-time 1 
						  rb1_base_control
						  joint_read_state_controller"/>
					  
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
		respawn="false" output="screen">
		<remap from="/joint_states" to="joint_states" />
		</node>

		<!-- load elevator controller -->
		<node if="$(arg has_elevator)" name="elevator_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
		   output="screen" ns="/$(arg id_robot)" args="--shutdown-time 1 
						  elevator_controller"/>		

		<!--node pkg="twist_mux" type="twist_mux" name="twist_mux">
		<rosparam command="load" file="$(find rb1_base_control)/config/twist_mux.yaml" />
		<remap from="cmd_vel_out" to="cmd_vel"/>
		</node-->

		<!-- pad -->
		<!--include file="$(find rb1_base_pad)/launch/rb1_base_pad.launch"/-->

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!-- amcl -->
		<include if="$(arg launch_navigation)" file="$(find rb1_base_navigation)/launch/navigation_amcl/move_base_amcl.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
		</include>

	</group>

</launch>
